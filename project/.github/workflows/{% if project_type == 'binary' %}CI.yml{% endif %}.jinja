name: CI

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - v*

concurrency:
  group: {% raw %}${{ github.ref }}{% endraw %}
  cancel-in-progress: true

env:
  RUSTFLAGS: --deny warnings

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest

    steps:
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Cargo Check
        run: cargo check --locked

  test:
    name: Test
    runs-on: {% raw %}${{ matrix.os }}{% endraw %}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Tests
        run: cargo test

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Check Formatting
        run: cargo fmt --all -- --check

      - name: Run Linting
        run: cargo clippy --all-targets --all-features

  build:
    name: Build Release Binaries
    runs-on: {% raw %}${{ matrix.os }}{% endraw %}
    needs:
      - check
      - test
      - lint

    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: {{project_slug}}-{% raw %}${{ github.ref_name }}{% endraw %}-linux-x86_64.tar.gz

          - target: x86_64-apple-darwin
            os: macos-latest
            name: {{project_slug}}-{% raw %}${{ github.ref_name }}{% endraw %}-macos-x86_64.tar.gz

          - target: aarch64-apple-darwin
            os: macos-latest
            name: {{project_slug}}-{% raw %}${{ github.ref_name }}{% endraw %}-macos-arm64.tar.gz

          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: {{project_slug}}-{% raw %}${{ github.ref_name }}{% endraw %}-windows-x86_64.zip

          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: {{project_slug}}-{% raw %}${{ github.ref_name }}{% endraw %}-windows-arm64.zip

    steps:
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: {% raw %}${{ matrix.target }}{% endraw %}

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build
        run: |
          cargo build --release --locked --target {% raw %}${{ matrix.target }}{% endraw %}

      - name: Prepare Artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/{% raw %}${{ matrix.target }}{% endraw %}/release
          7z a ../../../{% raw %}${{ matrix.name }}{% endraw %} {{project_slug}}.exe
          cd -

      - name: Prepare Artifacts (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/{% raw %}${{ matrix.target }}{% endraw %}/release
          tar czvf ../../../{% raw %}${{ matrix.name }}{% endraw %} {{project_slug}}
          cd -

      - name: Upload Built Binaries
        uses: actions/upload-artifact@v3
        with:
          name: {% raw %}${{ matrix.name }}{% endraw %}
          path: {% raw %}${{ matrix.name }}{% endraw %}

  release:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs:
      - build

    permissions:
      contents: write

    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
      - name: Get Built Binaries
        uses: actions/download-artifact@v3

      - name: Make GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: {{project_slug}}-*/{{project_slug}}-*

      - name: Publish Draft Release
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
        with:
          release_id: {% raw %}${{ steps.create_release.outputs.id }}{% endraw %}

      - name: Publish Homebrew Release
        uses: Justintime50/homebrew-releaser@v1
        with:
          homebrew_owner: FollowTheProcess
          homebrew_tap: homebrew-tap
          formula_folder: Formula
          github_token: {% raw %}${{ secrets.HOMEBREW_TAP_TOKEN }}{% endraw %}
          install: bin.install "brewtest"
          target_darwin_amd64: true
          target_darwin_arm64: true
          target_linux_amd64: true
          target_linux_arm64: false

  cargo_publish:
    name: Publish Package
    runs-on: ubuntu-latest
    needs:
      - build

    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish
        run: cargo publish --token {% raw %}${{ secrets.CARGO_TOKEN }}{% endraw %}
